55,56c55,56
< #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
< #define HEIGHT(X)               ((X)->h + 2 * (X)->bw)
---
> #define WIDTH(X)                ((X)->w + 2 * (X)->bw + gappx)
> #define HEIGHT(X)               ((X)->h + 2 * (X)->bw + gappx)
1288a1289,1292
> 	unsigned int n;
> 	unsigned int gapoffset;
> 	unsigned int gapincr;
> 	Client *nbc;
1290,1293d1293
< 	c->oldx = c->x; c->x = wc.x = x;
< 	c->oldy = c->y; c->y = wc.y = y;
< 	c->oldw = c->w; c->w = wc.width = w;
< 	c->oldh = c->h; c->h = wc.height = h;
1294a1295,1328
> 
> 	/* Get number of clients for the client's monitor */
> 	for (n = 0, nbc = nexttiled(c->mon->clients); nbc; nbc = nexttiled(nbc->next), n++);
> 
> 	/* Do nothing if layout is floating */
> 	if (c->isfloating || c->mon->lt[c->mon->sellt]->arrange == NULL) {
> 		gapincr = gapoffset = 0;
> 	} else {
> 
> 		 /* =================================================================
> 		 * This part was changed by me after aplying the gap.diff.
> 		 * For some reason the patch creator didnt want gaps when the layout 
> 		 * is monocle or only one client. I removed this if statement so that
> 		 * the gap is applied even when just one window is shown.
> 		 * The previous if statement were:
> 		 * 	if (... == monocle || n == 1) { ... }
> 		 * =================================================================*/
> 
> 		/* Remove border and gap if layout is monocle or only one client */
> 		if (c->mon->lt[c->mon->sellt]->arrange == monocle) {
> 			gapoffset = 0;
> 			gapincr = -2 * borderpx;
> 			wc.border_width = 0;
> 		} else {
> 			gapoffset = gappx;
> 			gapincr = 2 * gappx;
> 		}
> 	}
> 
> 	c->oldx = c->x; c->x = wc.x = x + gapoffset;
> 	c->oldy = c->y; c->y = wc.y = y + gapoffset;
> 	c->oldw = c->w; c->w = wc.width = w - gapincr;
> 	c->oldh = c->h; c->h = wc.height = h - gapincr;
> 
1704c1738
< 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
---
> 			resize(c, m->wx, m->wy + my, mw - (2*c->bw) + (n > 1 ? gappx : 0), h - (2*c->bw), 0);
